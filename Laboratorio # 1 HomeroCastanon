{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "899b1e4e-e1e3-44e4-b2e2-861a49f58579",
   "metadata": {},
   "source": [
    "Laboratorio #1 - (Git & Github)\n",
    "\n",
    "Por: Homero Castañón\n",
    "\n",
    "Carné: 24008059"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31dad88c-6da9-4c91-b16c-8262692b1f7d",
   "metadata": {},
   "source": [
    "# 1. ¿Qué es git?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c624afe-0fdf-4562-9720-0a3f426456b6",
   "metadata": {},
   "source": [
    "Git es un sistema de control de versiones distribuido y de código abierto desarrollado por Linus Torvalds en 2005. Está diseñado para manejar proyectos de desarrollo de software de cualquier tamaño de manera rápida y eficiente. Es conocido por su capacidad para admitir ramificaciones y etiquetado, áreas de preparación eficientes y múltiples flujos de trabajo. Almacena todo en una base de datos por el valor hash de su contenido, lo que lo hace rápido, seguro y escalable. Su arquitectura distribuida permite que cada copia de trabajo sea un repositorio completo, facilitando la colaboración entre los miembros del equipo. Es ampliamente utilizado en la industria del software y es una habilidad valiosa para los desarrolladores."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87fd6a42-5bed-400e-ba37-71207bf3f463",
   "metadata": {},
   "source": [
    "# 2. ¿Qué es Github?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "673b8553-4aa2-4412-bd4d-cdd7eb846c16",
   "metadata": {},
   "source": [
    "GitHub es una plataforma en línea que facilita la colaboración y el control de versiones para desarrolladores de codigo y software. Funciona como un servicio de alojamiento en la nube para repositorios Git, permitiendo a individuos y equipos gestionar su código y realizar un seguimiento de los cambios en él. Fundada en 2008 y adquirida por Microsoft en 2018 por 7.500 millones de dólares, GitHub es el servidor de código fuente más grande del mundo."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c55ab9-5ce6-4673-b36c-cd375bb40d5c",
   "metadata": {},
   "source": [
    "Los desarrolladores pueden almacenar, organizar y compartir código en GitHub, lo que les permite trabajar en proyectos de software de manera colaborativa. Es especialmente útil para proyectos complejos y de gran escala, ya que facilita el seguimiento de los cambios a lo largo del tiempo y la colaboración entre diferentes personas."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f2d54c7-6f21-4a48-b2ba-81cc0b76f8ab",
   "metadata": {},
   "source": [
    "Además, GitHub ofrece integración con una variedad de herramientas y servicios de terceros, lo que mejora la eficiencia en el desarrollo de software. También sirve como una plataforma de redes sociales para desarrolladores, donde pueden conectarse, colaborar y mostrar su trabajo. En resumen, GitHub es una herramienta esencial para desarrolladores de software que buscan trabajar de manera colaborativa y gestionar proyectos de código abierto de manera efectiva."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "079f829e-33d9-45f0-ab37-77259ef8c235",
   "metadata": {},
   "source": [
    "# 3. MagicCells"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "482540c0-5424-4847-9e8d-751b67f47e66",
   "metadata": {},
   "source": [
    "Los \"MagicCells\" son comandos especiales que permiten a los usuarios realizar diversas tareas y personalizaciones dentro de Jupyter Notebooks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "465ecede-f1de-4545-a831-80b768bbfb3e",
   "metadata": {},
   "source": [
    "Por ejemplo, la función mágica de celda representa el contenido de una celda de código como HTML y la función mide el tiempo de ejecución del código de una celda."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e37f91cf-e8cd-40db-b54a-6f16f8041157",
   "metadata": {},
   "source": [
    "Existen dos tipos de _MagicCells_:\n",
    "\n",
    "A. Cell Magic Functions\n",
    "B. Line Magic Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9bee085-c30c-4e5b-95c8-82be83116a73",
   "metadata": {},
   "source": [
    "## 3.1 Cell Magic Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0209ca28-3c09-492b-a8f6-8e313fb10687",
   "metadata": {},
   "source": [
    "_Cell Magic Fuction_ Son comandos especiales que permiten al usuario modificar explícitamente el comportamiento de una celda de código. Las funciones de Cell Magic tienen el prefijo '%%' seguido del nombre del comando. Las funciones de Cell Magic sirven para diversas tareas y personalizaciones.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7f4c415-e8f2-41a9-bf2b-79a0afdc290a",
   "metadata": {},
   "source": [
    "### 3.1.1 Ventajas de las funciones _MagicCell_\n",
    "\n",
    "* Comportamiento especializado y características dentro de Jupyter Notebook\n",
    "* Personalización\n",
    "* Proporciona documentación rica al representar contenido en varios formatos como Markdown y HTML.\n",
    "* Simplifique tareas comunes como cronometrar la ejecución de código, creación de perfiles, visualización de datos, etc.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "730875cb-1103-47ce-b9dd-2d34f0b0d761",
   "metadata": {},
   "source": [
    "### 3.1.2 Limitaciones de las funciones _MagicCell_\n",
    "\n",
    "* Dependencias de diferentes núcleos o entornos.\n",
    "* La ambigüedad ocurre si se usan demasiadas magias celulares y puede causar conflictos potenciales.\n",
    "* Es difícil recordar la sintaxis de diferentes funciones mágicas celulares."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff5219ba-7b7c-4f75-b8e2-32e9fe950d40",
   "metadata": {},
   "source": [
    "#### A. Tabla de funciones\n",
    "| Función mágica | Descripción                                                                                     |\n",
    "|----------------|-------------------------------------------------------------------------------------------------|\n",
    "| %%intento      | Ejecuta celdas con bash en un subproceso.                                                       |\n",
    "| %%captura      | Ejecuta la celda, capturando las llamadas display() enriquecidas de stdout, stderr y IPython.   |\n",
    "| %%html         | Representar la celda como un bloque de HTML.                                                     |\n",
    "| %%javascript   | Ejecuta el bloque de celdas de código Javascript.                                                |\n",
    "| %%látex        | Renderizar la celda como un bloque de LaTeX.                                                     |\n",
    "| %%reducción    | Representar la celda como bloque de texto Markdown.                                              |\n",
    "| %%perla        | Ejecuta celdas con perl en un subproceso.                                                        |\n",
    "| %%pipi         | Ejecutar celdas con pypy en un subproceso.                                                       |\n",
    "| %%pitón        | Ejecutar celdas con Python en un subproceso.                                                     |\n",
    "| %%python2      | Ejecuta celdas con python2 en un subproceso.                                                     |\n",
    "| %%python3      | Ejecutar celdas con python3 en un subproceso.                                                     |\n",
    "| %%rubí         | Ejecuta celdas con Ruby en un subproceso.                                                        |\n",
    "| %%guion        | Ejecuta una celda mediante un comando de shell.                                                  |\n",
    "| %%sh           | Ejecuta celdas con sh en un subproceso.                                                          |\n",
    "| %%svg          | Representar la celda como un literal SVG.                                                        |\n",
    "| %%escribir archivo | Escribe el contenido de la celda en un archivo.                                                 |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38558fc6-9831-4ad1-b373-6e38f5c11926",
   "metadata": {},
   "source": [
    "#### B. Ejemplos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "3a209408-2e02-4d70-98ff-32f294ded4fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 77.8 ms, sys: 3.42 ms, total: 81.2 ms\n",
      "Wall time: 81.7 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "for i in range(1000000):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e98eaddf-7f8e-4113-b7fd-bd2f51df5fc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting my_script.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile my_script.py\n",
    "print(\"Hello, world!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "9070a5f8-87ec-4760-be9b-5ee98a2a4bb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "# Encabezado de Markdown\n",
       "* Punto para describir elementos\n",
       "- _HOLA_\n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%markdown\n",
    "# Encabezado de Markdown\n",
    "* Punto para describir elementos\n",
    "- _HOLA_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "0d263181-2e88-41ac-bc42-a176d46dec0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<font size=10 color='hotpink'>Hola Profesor, es un gusto verle aquí</font>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<font size=10 color='hotpink'>Hola Profesor, es un gusto verle aquí</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "34c9c71a-172f-46be-8ca4-168f8f2956f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$e^{i\\pi} + 1 = 0$\n"
      ],
      "text/plain": [
       "<IPython.core.display.Latex object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%latex\n",
    "$e^{i\\pi} + 1 = 0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "cc8d601d-4398-4e96-937b-be66d167bb7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Definir funciones para las coordenadas x e y del corazón\n",
    "def xhrt(t):\n",
    "    return 16 * np.sin(t) ** 3\n",
    "\n",
    "def yhrt(t):\n",
    "    return 13 * np.cos(t) - 5 * np.cos(2 * t) - 2 * np.cos(3 * t) - np.cos(4 * t)\n",
    "\n",
    "# Crear datos para trazar el corazón\n",
    "t = np.arange(0, 2 * np.pi, 0.1)\n",
    "x = xhrt(t)\n",
    "y = yhrt(t)\n",
    "\n",
    "# Crear la figura y los ejes\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.axis('equal')\n",
    "\n",
    "# Dibujar el corazón (línea)\n",
    "plt.plot(x, y, color='black')\n",
    "\n",
    "# Rellenar el corazón (polígono)\n",
    "plt.fill(x, y, color='hotpink')\n",
    "\n",
    "# Dibujar los puntos en la parte superior del corazón\n",
    "points_x = [10, -10, -15, 15]\n",
    "points_y = [-10, -10, 10, 10]\n",
    "plt.scatter(points_x, points_y, marker='D', color='red', zorder=5)\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
